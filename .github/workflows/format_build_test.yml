name: format_buld_test
on:
  workflow_dispatch:
env:
  TestConfigFilePath: testData/testconfig.json
  TestApiKey: ${{ secrets.TEST_API_KEY }}
  TestAppId: ${{ vars.TEST_APP_ID }}
jobs:
  format:
    name: format
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with: 
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Run dotnet format
        run: dotnet format
      - name: Commit any formatting changes
        id: format_commit
        uses: EndBug/add-and-commit@v9
        with:
          message: 'fix: resolve format errors'
          committer_name: GitHub Actions
    outputs:
      committed: ${{ steps.format_commit.outputs.committed }}
  build_and_test_mac_os:
    needs: format
    if: needs.format.outputs.committed == 'false'
    name: build_and_test_mac_os        
    runs-on: mac-os-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Initialize git submodules
        run: git submodule update --init --recursive
      - name: Update git submodules
        run: git submodule update --recursive --remote
      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Create testData
        run: mkdir -p tests/testData
      - name: Create testconfig.json
        run: "echo '{ \"ApiKey\": \"${{ env.TestApiKey }}\", \"AppId\": \"${{ env.TestAppId }}\" }' > tests/testData/testconfig.json"  
      - name: Build projects
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --collect:"XPlat Code Coverage;Include=[OnspringAttachmentReporter]*"
      - name: Make coverage directory
        run: mkdir -p tests/TestResults/coverage
      - name: Rename test coverage report
        run: mv tests/TestResults/*/coverage.cobertura.xml tests/TestResults/coverage/mac-os-latest-coverage.cobertura.xml
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-mac-os-latest
          path: tests/TestResults/coverage/mac-os-latest-coverage.cobertura.xml
  build_and_test_linux:
    needs: format
    if: needs.format.outputs.committed == 'false'
    name: build_and_test_linux     
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Initialize git submodules
        run: git submodule update --init --recursive
      - name: Update git submodules
        run: git submodule update --recursive --remote
      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Create testData
        run: mkdir -p tests/testData
      - name: Create testconfig.json
        run: "echo '{ \"ApiKey\": \"${{ env.TestApiKey }}\", \"AppId\": \"${{ env.TestAppId }}\" }' > tests/testData/testconfig.json"  
      - name: Build projects
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --collect:"XPlat Code Coverage;Include=[OnspringAttachmentReporter]*"
      - name: Make coverage directory
        run: mkdir -p tests/TestResults/coverage
      - name: Rename test coverage report
        run: mv tests/TestResults/*/coverage.cobertura.xml tests/TestResults/coverage/ubuntu-latest-coverage.cobertura.xml
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-ubuntu-latest
          path: tests/TestResults/coverage/ubuntu-latest-coverage.cobertura.xml
  build_and_test_windows:
    needs: format
    if: needs.format.outputs.committed == 'false'
    name: build_and_test_windows     
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Initialize git submodules
        run: git submodule update --init --recursive
      - name: Update git submodules
        run: git submodule update --recursive --remote
      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Create testData
        run: mkdir -force tests/testData
      - name: Create testconfig.json
        run: "echo '{ \"ApiKey\": \"${{ env.TestApiKey }}\", \"AppId\": \"${{ env.TestAppId }}\" }' > tests/testData/testconfig.json"  
      - name: Build projects
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --collect:"XPlat Code Coverage;Include=[OnspringAttachmentReporter]*"
      - name: Make coverage directory
        run: mkdir -force tests/TestResults/coverage
      - name: Rename test coverage report
        run: mv tests/TestResults/*/coverage.cobertura.xml tests/TestResults/coverage/windows-latest-coverage.cobertura.xml
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-windows-latest
          path: tests/TestResults/coverage/windows-latest-coverage.cobertura.xml
  test_coverage:
    needs: [ build_and_test_mac_os, build_and_test_windows, build_and_test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Download ubuntu-latest report
        uses: actions/download-artifcat@v3
        with:
          name: test-coverage-ubuntu-latest
          path: ./coverage
      - name: Download windows-latest report
        uses: actions/download-artifcat@v3
        with:
          name: test-coverage-windows-latest
          path: ./coverage
      - name: Download macos-latest report
        uses: actions/download-artifcat@v3
        with:
          name: test-coverage-macos-latest
          path: ./coverage
      - name: Upload test coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
