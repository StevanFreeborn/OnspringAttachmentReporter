name: publish_and_release
on:
  workflow_dispatch:
jobs:
  test:
    env:
      TestConfigFilePath: testData/testconfig.json
      TestApiKey: ${{ secrets.TEST_API_KEY }}
      TestAppId: ${{ vars.TEST_APP_ID }}
    name: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTIONS_PAT }}
    - name: Initialize git submodules
      run: git submodule update --init --recursive
    - name: Update git submodules
      run: git submodule update --recursive --remote
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Attempt to create testData directory
      run: mkdir -p tests/testData
    - name: Create testconfig.json
      run: "echo '{ \"ApiKey\": \"${{ env.TestApiKey }}\", \"AppId\": \"${{ env.TestAppId }}\" }' > tests/testData/testconfig.json"
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --collect:"XPlat Code Coverage;Include=[OnspringAttachmentReporter]*" --no-build --verbosity normal
    - name: Upload test coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: tests/TestResults/*/coverage.cobertura.xml
  publish_coverage:
    needs: [ test ]
    name: publish_test_coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTIONS_PAT }}
    - name: Download test coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./coverage
    - name: Upload test coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  version:
    needs: [ publish_coverage ]
    runs-on: ubuntu-latest
    steps:
    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v6
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTIONS_PAT }}
        fetch-depth: 0
    - name: Initialize git submodules
      run: git submodule update --init --recursive
    - name: Update git submodules
      run: git submodule update --recursive --remote
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x
    - name: Install versionize
      run: dotnet tool install --global Versionize
    - name: Setup git
      run: |
            git config --local user.email "65925598+StevanFreeborn@users.noreply.github.com"
            git config --local user.name "Stevan Freeborn"
    - name: Run versionize for main
      id: versionize-main
      if: steps.branch-name.outputs.ref_branch == 'main'
      run: versionize -i --workingDir ./src
    - name: Upload changelog for main
      if: steps.versionize-main.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: change-log
        path: src/CHANGELOG.md
    - name: Run versionize for beta
      id: versionize-beta
      if: steps.branch-name.outputs.ref_branch == 'beta'
      run: versionize -i --pre-release beta --workingDir ./src
    - name: Upload changelog for beta
      if: steps.versionize-beta.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: change-log
        path: src/CHANGELOG.md
    - name: Push changes to GitHub
      if: steps.versionize-main.outcome == 'success' || steps.versionize-beta.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACTIONS_PAT }}
        branch: ${{ github.ref }}
        tags: true
  publish:
    needs: [ version ]
    if: needs.version.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main
        token: ${{ secrets.ACTIONS_PAT }}
    - name: Initialize git submodules
      run: git submodule update --init --recursive
    - name: Update git submodules
      run: git submodule update --recursive --remote
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x
    - name: Publish for mac-os
      run: dotnet publish src/OnspringAttachmentReporter.csproj -c Release -r osx-x64 --self-contained -o dist/mac-os
    - name: Rename mac-os binary
      run: mv dist/mac-os/OnspringAttachmentReporter dist/OnspringAttachmentReporter_osx_x64
    - name: Publish for linux-os
      run: dotnet publish src/OnspringAttachmentReporter.csproj -c Release -r linux-x64 --self-contained -o dist/linux-os
    - name: Rename linux-os binary
      run: mv dist/linux-os/OnspringAttachmentReporter dist/OnspringAttachmentReporter_linux_x64
    - name: Publish for windows-os
      run: dotnet publish src/OnspringAttachmentReporter.csproj -c Release -r win-x64 --self-contained -o dist/windows-os
    - name: Rename windows-os binary
      run: mv dist/windows-os/OnspringAttachmentReporter.exe dist/OnspringAttachmentReporter_windows_x64.exe
    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v6
    - name: Get project version
      uses: kzrnm/get-net-sdk-project-versions-action@v1
      id: get-version
      with:
        proj-path: src/OnspringAttachmentReporter.csproj
    - name: Download changlog
      uses: actions/download-artifact@v3
      with:
        name: change-log
        path: src
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.ACTIONS_PAT }}
        name: Onspring Attachment Reporter v${{ steps.get-version.outputs.version }}
        tag_name: v${{ steps.get-version.outputs.version }}
        draft: false
        prerelease: ${{ steps.branch-name.outputs.ref_branch == 'beta' }}
        body_path: src/CHANGELOG.md
        files: |
          dist/OnspringAttachmentReporter_osx_x64
          dist/OnspringAttachmentReporter_linux_x64
          dist/OnspringAttachmentReporter_windows_x64.exe
      

